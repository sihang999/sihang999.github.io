<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://sihang999.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://sihang999.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-04-13T10:54:12+00:00</updated><id>https://sihang999.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">How to Access Remote Linux Server</title><link href="https://sihang999.github.io/blog/2025/Access-to-Linux-server-remotely/" rel="alternate" type="text/html" title="How to Access Remote Linux Server"/><published>2025-04-12T12:57:00+00:00</published><updated>2025-04-12T12:57:00+00:00</updated><id>https://sihang999.github.io/blog/2025/Access%20to%20Linux%20server%20remotely</id><content type="html" xml:base="https://sihang999.github.io/blog/2025/Access-to-Linux-server-remotely/"><![CDATA[<p>During your studies and work at TUM, you may often encounter situations where you cannot physically access the lab, but the experiments or code must be run only within the lab environment.</p> <p>For example:</p> <ul> <li> <p>The lab is closed on weekends but the deadline is approaching.</p> </li> <li> <p>You are traveling, but suddenly need to modify or improve your experiment code remotely.</p> </li> </ul> <p>Feeling anxious in these situations?</p> <p>This is exactly where remote access tools come in handy. By connecting to the lab server remotely via command line/console, you can easily edit files, modify code, view results, and perform many other tasks.</p> <p>If GUI applications are necessary, we can use MobaXterm’s X11 forwarding or VNC to display GUI applications on your local computer and interact with them just like working in the lab.</p> <blockquote> <p>Note: All of this assumes that you already have access to the server — meaning you should have a valid username and password granted by the administrator.</p> </blockquote> <h1 id="1-download-mobaxterm">1. Download MobaXterm</h1> <p>MobaXterm is a powerful remote terminal tool mainly used on Windows systems for managing Linux/Unix servers remotely.</p> <p>It integrates multiple remote connection protocols and tools, such as:</p> <ul> <li> <p>SSH</p> </li> <li> <p>X11 forwarding</p> </li> <li> <p>RDP / VNC / FTP / Telnet / Serial</p> </li> </ul> <p>And the best part — it’s free! You can download it directly from the <a href="https://mobaxterm.mobatek.net/">official website</a>.</p> <h1 id="2-accessing-linux-servers-via-different-protocols">2. Accessing Linux Servers via Different Protocols</h1> <h2 id="--ssh-protocol">- SSH Protocol</h2> <p>If you don’t need any graphical interface (GUI), the simplest and most efficient way is to connect to the lab’s Linux server via SSH.</p> <p>Once connected, you can directly work in the server’s terminal environment to edit code, manage files, and perform various operations. For example: <code class="language-plaintext highlighter-rouge">Editing code using vim / nano / emacs</code>. (This tutorial will not cover these commands in detail since there are plenty of guides online.)</p> <h3 id="steps">Steps</h3> <ol> <li> <p>Open MobaXterm.</p> </li> <li> <p>Create a new session and select SSH protocol as shown below:</p> </li> </ol> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/access_linux_server/SSH-480.webp 480w,/assets/img/access_linux_server/SSH-800.webp 800w,/assets/img/access_linux_server/SSH-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/access_linux_server/SSH.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p> 3. Enter the target server’s IP address and your assigned username. Leave other settings as default and click OK.</p> <p> 4. A new SSH session will be created. Double-click it to open. Enter your password (If you didn’t set a username initially, you will be asked to input it now).</p> <p>Once connected, you will be in the root directory of the target server as shown below:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/access_linux_server/SSH-pass-480.webp 480w,/assets/img/access_linux_server/SSH-pass-800.webp 800w,/assets/img/access_linux_server/SSH-pass-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/access_linux_server/SSH-pass.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/access_linux_server/final-480.webp 480w,/assets/img/access_linux_server/final-800.webp 800w,/assets/img/access_linux_server/final-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/access_linux_server/final.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Now, you can work and study from anywhere!</p> <h2 id="--ssh-protocol-with-x11-forwarding">- SSH Protocol with X11 forwarding</h2> <p>If you are not familiar with Linux command line operations, or you must use a certain GUI application to proceed with your experiments, then SSH combined with X11 forwarding is the best choice. It is stable and fast.</p> <h3 id="steps-1">Steps</h3> <ol> <li> <p>Make sure that the server has xauth installed and that X11Forwarding is enabled. If not, run the following commands on the server:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">//install xauth</span>
 <span class="n">sudo</span> <span class="n">apt</span> <span class="n">update</span>
 <span class="n">sudo</span> <span class="n">apt</span> <span class="n">install</span> <span class="n">xauth</span> <span class="n">x11</span><span class="o">-</span><span class="n">apps</span> <span class="n">xfce4</span>

 <span class="c1">// Check X11 Forwarding in sshd_config</span>
 <span class="n">sudo</span> <span class="n">nano</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">ssh</span><span class="o">/</span><span class="n">sshd_config</span>
 <span class="c1">//Make sure the following lines exist:</span>
 <span class="c1">// X11Forwarding yes</span>
 <span class="c1">// X11DisplayOffset 10</span>
 <span class="c1">// X11UseLocalhost yes</span>
 <span class="n">sudo</span> <span class="n">systemctl</span> <span class="n">restart</span> <span class="n">sshd</span>
</code></pre></div> </div> </li> <li> <p>Creating SSH with X11 Forwarding Session: The steps are almost the same as creating a normal SSH session. The only difference is that you need to ensure X11-Forwarding is checked in the “Advanced SSH Settings” section.</p> <p>After connecting successfully, you will also land in the server’s root directory just like with SSH.</p> </li> <li> <p>Now, you can run GUI applications directly in the console, and they will pop up on your local machine. For example, to open Firefox browser, simply run:<code class="language-plaintext highlighter-rouge">firefox</code>。</p> </li> </ol> <blockquote> <p>Keep in mind that some applications might require being launched from a specific directory — you should know this based on your project setup.</p> </blockquote> <h3 id="--vnc">- VNC</h3> <p>updating……</p>]]></content><author><name></name></author><category term="code"/><category term="Linux"/><summary type="html"><![CDATA[The post introduces MobaXterm for remote access to a Linux server.]]></summary></entry><entry><title type="html">AES Decyption in C</title><link href="https://sihang999.github.io/blog/2025/AES/" rel="alternate" type="text/html" title="AES Decyption in C"/><published>2025-02-06T12:57:00+00:00</published><updated>2025-02-06T12:57:00+00:00</updated><id>https://sihang999.github.io/blog/2025/AES</id><content type="html" xml:base="https://sihang999.github.io/blog/2025/AES/"><![CDATA[<p>The blog will introduce Standard AES 128-bit ECB Decryption algorithm implemented in C during my Smart Card Lab.</p> <p>The whole AES decrpytion algorithm is implemented by C and its libraries.</p> <h2 id="decryption-workflow">Decryption Workflow</h2> <p>There is a picture created by me to show the AES Decryption Workflow:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/AES_decryption/workflow-480.webp 480w,/assets/img/AES_decryption/workflow-800.webp 800w,/assets/img/AES_decryption/workflow-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/AES_decryption/workflow.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="code-implementation">Code Implementation</h2> <p>To maintain code clarity, only the files <code class="language-plaintext highlighter-rouge">aes.h</code> and <code class="language-plaintext highlighter-rouge">aes.c</code> were created to implement the decryption process. The header file declares the function prototypes and constant lookup tables for AES decryption, while the aes.c file implements all functions and defines the necessary lookup tables.</p> <h4 id="1-first-according-to-the-workflow-we-should-implement-all-the-corresponding-functions-to-complete-the-entire-decryption-task-in-aesc">1. First, according to the workflow, we should implement all the corresponding functions to complete the entire decryption task in <code class="language-plaintext highlighter-rouge">aes.c</code>.</h4> <p>For example, the following are one important step in the decryption process, namely InverseMixColumns:</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">InverseMixColumns</span><span class="p">(</span><span class="kt">uint8_t</span> <span class="o">*</span> <span class="n">state</span><span class="p">)</span> <span class="p">{</span>
	<span class="kt">uint8_t</span> <span class="n">tmp</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
	<span class="kt">int</span> <span class="n">order</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">};</span> 
	<span class="k">if</span><span class="p">(</span><span class="n">shuffle_flag</span><span class="p">){</span>
		<span class="c1">// Randomization order</span>
    	<span class="n">shuffle_order</span><span class="p">(</span><span class="n">order</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">row</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">row</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">order</span><span class="p">[</span><span class="n">row</span><span class="p">];</span> 

        <span class="n">tmp</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span><span class="n">mul14</span><span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">0</span><span class="p">]]</span> <span class="o">^</span> <span class="n">mul11</span><span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]]</span> <span class="o">^</span> <span class="n">mul13</span><span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]]</span> <span class="o">^</span> <span class="n">mul9</span><span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">]];</span>
        <span class="n">tmp</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span><span class="n">mul9</span><span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">0</span><span class="p">]]</span> <span class="o">^</span> <span class="n">mul14</span><span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]]</span> <span class="o">^</span> <span class="n">mul11</span><span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]]</span> <span class="o">^</span> <span class="n">mul13</span><span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">]];</span>
        <span class="n">tmp</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span><span class="n">mul13</span><span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">0</span><span class="p">]]</span> <span class="o">^</span> <span class="n">mul9</span><span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]]</span> <span class="o">^</span> <span class="n">mul14</span><span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]]</span> <span class="o">^</span> <span class="n">mul11</span><span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">]];</span>
        <span class="n">tmp</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">char</span><span class="p">)</span><span class="n">mul11</span><span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">0</span><span class="p">]]</span> <span class="o">^</span> <span class="n">mul13</span><span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]]</span> <span class="o">^</span> <span class="n">mul9</span><span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">2</span><span class="p">]]</span> <span class="o">^</span> <span class="n">mul14</span><span class="p">[</span><span class="n">state</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">3</span><span class="p">]];</span>
    <span class="p">}</span>

	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>After implementing all necessary step functions, we should connect all the steps together to build a final decryption function, whose parameters are the <code class="language-plaintext highlighter-rouge">expanded key</code> and 16-bytes <code class="language-plaintext highlighter-rouge">cipher text buf</code>, and it will change cipher text to plain text.</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">AES_ECB_decrypt</span><span class="p">(</span><span class="kt">uint8_t</span> <span class="o">*</span> <span class="n">expandedKey</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="o">*</span> <span class="n">buf</span><span class="p">)</span>
<span class="p">{</span>
	<span class="kt">uint8_t</span> <span class="n">state</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span> <span class="c1">// Stores the first 16 bytes of encrypted message</span>

	<span class="c1">// memcpy(state, buf, 16);</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
	<span class="p">}</span>

	<span class="c1">//1st Round, We use the expandedKey[160] to expandedKey[175] to decryption</span>
	<span class="n">InitialRound</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">expandedKey</span><span class="o">+</span><span class="mi">160</span><span class="p">,</span> <span class="n">mask_in</span><span class="p">,</span> <span class="n">mask_out</span><span class="p">);</span>
	<span class="k">if</span><span class="p">(</span><span class="n">mask_flag</span><span class="p">){</span>
		<span class="n">remove_mask</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">mask_out</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span>
	<span class="p">}</span>

	<span class="kt">int</span> <span class="n">numberOfRounds</span> <span class="o">=</span> <span class="mi">9</span><span class="p">;</span>
	<span class="c1">//Round 2nd to 10th(9 rounds), We use the expandedKey[16] to expandedKey[159] to decryption</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">create_mask</span><span class="p">(</span><span class="n">mask_in</span><span class="p">,</span> <span class="n">mask_out</span><span class="p">);</span>
		<span class="k">if</span><span class="p">(</span><span class="n">mask_flag</span><span class="p">){</span>
			<span class="n">apply_mask</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">mask_in</span><span class="p">,</span> <span class="mi">16</span><span class="p">);</span><span class="c1">//add mask for input data/state</span>
		<span class="p">}</span>
		<span class="n">Round</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">expandedKey</span> <span class="o">+</span> <span class="p">(</span><span class="mi">16</span> <span class="o">*</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)),</span> <span class="n">mask_in</span><span class="p">,</span> <span class="n">mask_out</span><span class="p">,</span><span class="n">i</span><span class="p">);</span>
		<span class="k">if</span><span class="p">(</span><span class="n">mask_flag</span><span class="p">){</span>
			<span class="n">remove_mask</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">mask_out</span><span class="p">);</span>
		<span class="p">}</span>
	<span class="p">}</span>	

	<span class="c1">//Final round, We use the expandedKey[0] to expandedKey[16] to decryption</span>
	<span class="n">SubRoundKey</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">expandedKey</span><span class="p">);</span> 

	<span class="c1">// Copy decrypted state to buffer</span>
	<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">buf</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">state</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <h4 id="2-create-aesh-to-allow-other-modules-to-easily-use-functions-or-look-up-tables">2. Create <code class="language-plaintext highlighter-rouge">aes.h</code> to allow other modules to easily use functions or look-up tables.</h4> <p>In the following function declaration, the <code class="language-plaintext highlighter-rouge">AES_ECB_decrypt</code> function can be directly used by other modules by <code class="language-plaintext highlighter-rouge">include aes.h</code>.</p> <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">KeysExpansion</span><span class="p">(</span><span class="k">const</span> <span class="kt">uint8_t</span> <span class="n">inputKey</span><span class="p">[</span><span class="mi">16</span><span class="p">],</span> <span class="kt">uint8_t</span> <span class="n">expandedKeys</span><span class="p">[</span><span class="mi">176</span><span class="p">]);</span>
<span class="kt">void</span> <span class="nf">SubRoundKey</span><span class="p">(</span><span class="kt">uint8_t</span> <span class="o">*</span> <span class="n">state</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="o">*</span> <span class="n">roundKey</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">InverseMixColumns</span><span class="p">(</span><span class="kt">uint8_t</span> <span class="o">*</span> <span class="n">state</span><span class="p">)</span> <span class="p">;</span>
<span class="kt">void</span> <span class="nf">Round</span><span class="p">(</span><span class="kt">uint8_t</span> <span class="o">*</span> <span class="n">state</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="o">*</span> <span class="n">key</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">mask_in</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">mask_out</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="n">round</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">InitialRound</span><span class="p">(</span><span class="kt">uint8_t</span> <span class="o">*</span> <span class="n">state</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="o">*</span> <span class="n">key</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">mask_in</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="o">*</span><span class="n">mask_out</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">AES_ECB_decrypt</span><span class="p">(</span><span class="kt">uint8_t</span> <span class="o">*</span> <span class="n">expandedKey</span><span class="p">,</span> <span class="kt">uint8_t</span> <span class="o">*</span> <span class="n">buf</span><span class="p">);</span>

<span class="k">extern</span> <span class="k">const</span> <span class="kt">uint8_t</span> <span class="n">s</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
<span class="k">extern</span> <span class="k">const</span> <span class="kt">uint8_t</span> <span class="n">rcon</span><span class="p">[</span><span class="mi">11</span><span class="p">];</span>
<span class="k">extern</span> <span class="k">const</span> <span class="kt">uint8_t</span> <span class="n">inv_s</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
</code></pre></div></div> <p>Of course, it is not enough to just implement the basic AES decryption algorithm. In order to resist Side Channel Analysis attacks, such as DPA attacks, electricalmanetic attacks, and timing analysis attacks, we must add Hiding countermeasures and Masking countermeasures. If you are interested in the full code, you can find <a href="https://github.com/sihang999/AES-decryption.git">repository: AES-decryption</a> on github.</p>]]></content><author><name></name></author><category term="code"/><category term="C/C++"/><summary type="html"><![CDATA[The blog will introduce the AES decyption algorithm implemented in C.]]></summary></entry><entry><title type="html">Three typesetting languages</title><link href="https://sihang999.github.io/blog/2025/typesetting-languages/" rel="alternate" type="text/html" title="Three typesetting languages"/><published>2025-01-17T12:57:00+00:00</published><updated>2025-01-17T12:57:00+00:00</updated><id>https://sihang999.github.io/blog/2025/typesetting-languages</id><content type="html" xml:base="https://sihang999.github.io/blog/2025/typesetting-languages/"><![CDATA[<p>The post will introduce three typesetting languages.</p> <h2 id="1-latex">1. Latex</h2> <h3 id="intro">Intro</h3> <p>LaTeX is a mature typesetting language particularly well-suited for processing complex mathematical formulas and tables. The generated documents have high-quality typesetting, making it a popular choice for academic papers and publications.</p> <h3 id="how-to-use">How to use?</h3> <p>I recommend the online application <a href="https://www.overleaf.com/">Overleaf</a>. It is easy to use without requiring any installations or dependencies. Overleaf also supports collaborative editing, allowing multiple people to work on the same document simultaneously. Additionally, the latest version includes Git functionality!</p> <p>If you are a student, your university might have a partnership with Overleaf, granting you access to the Pro version for free. For instance, as a TUM student, I can use the <a href="https://sharelatex.tum.de/ldap/login">Overleaf LRZ</a> portal and log in with my TUM ID. This provides access to the Overleaf Pro version, along with various TUM-specific templates such as thesis, article, and report formats.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/wirting-languages/tumTemplate-480.webp 480w,/assets/img/wirting-languages/tumTemplate-800.webp 800w,/assets/img/wirting-languages/tumTemplate-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/wirting-languages/tumTemplate.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="2-typst">2. Typst</h2> <h3 id="intro-1">Intro</h3> <p>Typst is a emerging document typesetting language with a concise and user-friendly syntax. While it shares similarities with LaTeX, Typst is generally easier to learn and use.</p> <h3 id="how-to-use-1">How to use?</h3> <p>Typst offers its own online application. Visit the official website <a href="https://typst.app/">typst</a> to create an account and start using it. You can begin with templates or upload other files (e.g., DOC, Markdown, or LaTeX) to convert them into the Typst format. Typst also supports collaborative editing and Git integration.</p> <h2 id="3-markdown">3. Markdown</h2> <h3 id="intro-2">Intro</h3> <p>Markdown (MD) is a lightweight markup language ideal for quickly writing structured documents such as blogs, technical reports, notes, and instructions. Its simplicity makes it easy to learn and widely adopted. For example, this post itself is written in Markdown.</p> <h3 id="how-to-use-2">How to use?</h3> <p>Markdown is supported on multiple platforms (e.g., GitHub, GitLab, VSCode, Notion) and allows for direct rendering. If you want to edit Markdown files on your laptop (Windows system), you can download VSCode. Simply open a file with the .md extension in VSCode and start editing. You can use the integrated preview tool or install relevant plugins to view the rendered results.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/wirting-languages/markdown-480.webp 480w,/assets/img/wirting-languages/markdown-800.webp 800w,/assets/img/wirting-languages/markdown-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/wirting-languages/markdown.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div>]]></content><author><name></name></author><category term="code"/><category term="Typesetting"/><summary type="html"><![CDATA[The post will introduce three typesetting languages]]></summary></entry></feed>